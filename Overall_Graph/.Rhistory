library(tidyr)
library(ggplot2)
library(gcookbook)
ggplot(faithful, aes(x = waiting)) + geom_histogram()
#===============================================================================
# 6.3 Making a Density Curve
#===============================================================================
# Use geom_density()
ggplot(faithful, aes(x = waiting)) + geom_histogram(fill = "white", colour = "blue")
#===============================================================================
# 6.3 Making a Density Curve
#===============================================================================
# Use geom_density()
ggplot(faithful, aes(x = waiting)) + geom_density()
#===============================================================================
# 6.3 Making a Density Curve
#===============================================================================
# Use geom_density()
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins = 10, colour = "pink", fill = "white" ) +
geom_density()
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins = 10, colour = "pink", fill = "white" ) +
geom_density()
# expand_limits() increases the y range to include the value 0
ggplot(faithful, aes(x = waiting)) +
geom_line(stat = "density")
#===============================================================================
# 6.3 Making a Density Curve
#===============================================================================
# Use geom_density()
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins = 10, colour = "pink", fill = "white" )
#===============================================================================
# 6.3 Making a Density Curve
#===============================================================================
# Use geom_density()
ggplot(faithful, aes(x = waiting)) +
geom_density()
# expand_limits() increases the y range to include the value 0
ggplot(faithful, aes(x = waiting)) +
geom_line(stat = "density")
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(fill = "white", colour = "magenta") +
geom_line(stat = "density", size = 1.1, colour = 'blue')
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(bins = 15,  fill = "white", colour = "magenta", size = .8) +
geom_line(stat = "density", size = .8, colour = 'blue')
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(bins = 15,  fill = "white", colour = "magenta", size = .6) +
geom_line(stat = "density", size = .8, colour = 'blue')
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(bins = 15,  fill = "white", colour = "magenta", size = .6) +
geom_line(stat = "density", size = .8, colour = 'blue', linetype = "dotted")
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(bins = 15,  fill = "white", colour = "magenta", size = .6) +
geom_line(stat = "density", size = .8, colour = 'blue', linetype = "dashed")
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(bins = 15,  fill = "white", colour = "magenta", size = .6) +
geom_line(stat = "density", size = .8, colour = 'blue', linetype = "dashed") +
theme_minimal()
library(dplyr)
library(tidyr)
library(ggplot2)
library(gcookbook)
library(MASS) # Load MASS for the birthwt data set
head(birthwt)
birthwt_mod <- birthwt %>%
mutate(smoke = as.factor(smoke)) # Convert smoke to a factor
head(birthwt_mod)
# Map smoke to colour
ggplot(birthwt_mod, aes(x = bwt, colour = smoke)) +
geom_density()
ggplot(birthwt_mod, aes(x = bwt, fill = smoke)) +
geom_density(alpha = .3)
levels(birthwt_mod$smoke)
birthwt_mod$smoke <- recode(birthwt_mod$smoke, '0' = 'No Smoke', '1' = 'Smoke')
head(birthwt_mod)
ggplot(birthwt_mod, aes(x = bwt, fill = smoke)) +
geom_density(alpha = .3)
# faceting the density and histogram
ggplot(birthwt_mod, aes(x = bwt, y = ..density..)) +
geom_histogram(bins = 20, fill = "white", colour = "magenta", size = .2) +
geom_density() +
facet_grid(smoke ~ .)
# faceting the density and histogram
ggplot(birthwt_mod, aes(x = bwt, y = ..density..)) +
geom_histogram(bins = 20, fill = "white", colour = "magenta", size = .2) +
geom_density(colour = "blue", linetype = "dashed") +
facet_grid(smoke ~ .)
ggplot(faithful, aes(x=waiting)) +
geom_freqpoly()
ggplot(faithful, aes(x = waiting)) +
geom_freqpoly(binwidth = 4)
ggplot(faithful, aes(x = waiting)) +
geom_freqpoly(binwidth = 4)
# Use factor() to convert a numeric variable into a discrete variable
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot()
library(forcats)
ggplot(birthwt, aes(x = fct_reorder(.race, .desc = F), y = bwt)) +
geom_boxplot()
ggplot(birthwt, aes(x = fct_reorder(race, .desc = F), y = bwt)) +
geom_boxplot()
ggplot(birthwt, aes(x = fct_reorder(factor(race), .desc = F), y = bwt)) +
geom_boxplot()
str(birthwt_mod)
birthwt_mod$race <- as.factor(birthwt_mod$race)
str(birthwt_mod)
ggplot(birthwt, aes(x = fct_reorder(race, .desc = F), y = bwt)) +
geom_boxplot()
ggplot(birthwt_mod, aes(x = fct_reorder(race, .desc = F), y = bwt)) +
geom_boxplot()
ggplot(birthwt_mod, aes(x = fct_reorder(race, bwt, .desc = T), y = bwt)) +
geom_boxplot()
ggplot(birthwt_mod, aes(x = fct_reorder(race, bwt, .desc = F), y = bwt)) +
geom_boxplot()
ggplot(birthwt, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot()
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot()
ggplot(birthwt, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot() +
xlab("Race") + ylab("Birth Weight")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot(notch = TRUE)
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot(notch = F)
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot(notch = T)
ggplot(birthwt, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot(aes(colour = race)) +
xlab("Race") + ylab("Birth Weight")
ggplot(birthwt, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot(aes(colour = factor(race))) +
xlab("Race") + ylab("Birth Weight")
ggplot(birthwt, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot(aes(fill = factor(race))) +
xlab("Race") + ylab("Birth Weight")
?birthwt
birthwt_mod <- birthwt_mod %>%
recode(race, "1" = "White", "2"="Black", "3" = "Others")
birthwt_mod$race <- recode(birthwt_mod$race, "1" = "White", "2"="Black", "3" = "Others")
ggplot(birthwt_mod, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot(aes(fill = factor(race))) +
xlab("Race") + ylab("Birth Weight")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "pink", alpha = 0.25)
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "pink", alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "pink", alpha = 0.8) +
stat_summary(fun = "mean", geom = "point", shape = 23, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "blue", alpha = 0.7) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "blue", alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "pik", alpha = 0.9) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot() +
geom_point(position = "jitter", colour = "pink", alpha = 0.9) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = "jitter", colour = "pink", alpha = 0.9) +
geom_boxplot() +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = "jitter", colour = "pink", alpha = 0.9) +
geom_boxplot(alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = "jitter", colour = "blue", alpha = 0.25) +
geom_boxplot(alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = position_jitter(width = 1), colour = "blue", alpha = 0.25) +
geom_boxplot(alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = position_jitter(width = .5), colour = "blue", alpha = 0.25) +
geom_boxplot(alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = position_jitter(width = .3), colour = "blue", alpha = 0.25) +
geom_boxplot(alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
source("F:/R_Graph_Cookbook/summary_plot/summary_plot.R")
source("F:/R_Graph_Cookbook/summary_plot/summary_plot.R")
source("F:/R_Graph_Cookbook/summary_plot/summary_plot.R")
#===============================================================================
#                               Chapter 6
#                      Summarized Data Distributions
#===============================================================================
# This chapter explores how to visualize summarized distributions of data.
library(dplyr)
library(tidyr)
library(ggplot2)
library(gcookbook)
#===============================================================================
# 6.1 Making a Basic Histogram
#===============================================================================
# Use geom_histogram() and map a continuous variable to x
ggplot(faithful, aes(x = waiting)) +
geom_histogram()
# ggplot takes data.frames as input data...
# if data is not inform of data frames.. pass NULL as data, and .....
# put variable in aes()
waiting <- faithful$waiting
ggplot(data = NULL, aes(x=waiting)) + geom_histogram()
# change bin size, deafual is 30
ggplot(faithful, aes(x = waiting)) +
geom_histogram(bins = 15)
# change bins width
ggplot(faithful, aes(x = waiting)) +
geom_histogram(binwidth = 5)
#===============================================================================
# 6.2 Making Multiple Histograms from Grouped Data
#===============================================================================
# Use geom_histogram() and use facets for each group
library(MASS) # Load MASS for the birthwt data set
# Use smoke as the faceting variable
ggplot(birthwt, aes(x = bwt)) +
geom_histogram(fill = "white", colour = "black") +
facet_grid(smoke ~ .)
ggplot(birthwt, aes(x = bwt)) +
geom_histogram(fill = "white", colour = "black") +
facet_grid(. ~ smoke) # column wise . ~ smoke
# another approach is fill by the groupig variable
# Map smoke to fill, make the bars NOT stacked, and make them semitransparent
birthwt_mod <- birthwt
# Convert smoke to a factor and reassign new names
birthwt_mod$smoke <- recode_factor(birthwt_mod$smoke, '0' = 'No Smoke', '1' = 'Smoke')
ggplot(birthwt_mod, aes(x = bwt, fill = smoke)) +
geom_histogram(position = "identity", alpha = 0.4)
#===============================================================================
# 6.3 Making a Density Curve
#===============================================================================
# Use geom_density()
ggplot(faithful, aes(x = waiting)) +
geom_density()
# second method of using geom_line(stat = "density")
# expand_limits() increases the y range to include the value 0
ggplot(faithful, aes(x = waiting)) +
geom_line(stat = "density")
# Overlay histogram with density ..........
# use ggplot(data, aes(x = vec, y = ..density..))
ggplot(faithful, aes(x = waiting, y = ..density..)) +
geom_histogram(bins = 15,  fill = "white", colour = "magenta", size = .6) +
geom_line(stat = "density", size = .8, colour = 'blue', linetype = "dashed") +
theme_minimal()
#===============================================================================
# 6.4 Making Multiple Density Curves from Grouped Data
#===============================================================================
# map the grouping variable to an aesthetic like colour or fill
library(MASS) # Load MASS for the birthwt data set
birthwt_mod <- birthwt %>%
mutate(smoke = as.factor(smoke)) # Convert smoke to a factor
# Map smoke to colour
ggplot(birthwt_mod, aes(x = bwt, colour = smoke)) +
geom_density()
# Map smoke to fill and make the fill semitransparent by setting alpha
ggplot(birthwt_mod, aes(x = bwt, fill = smoke)) +
geom_density(alpha = .3)
# recoding smoking instead of 0 & 1
birthwt_mod$smoke <- recode(birthwt_mod$smoke, '0' = 'No Smoke', '1' = 'Smoke')
ggplot(birthwt_mod, aes(x = bwt, fill = smoke)) +
geom_density(alpha = .3)
# faceting the density and histogram
ggplot(birthwt_mod, aes(x = bwt, y = ..density..)) +
geom_histogram(bins = 20, fill = "white", colour = "magenta", size = .2) +
geom_density(colour = "blue", linetype = "dashed") +
facet_grid(smoke ~ .)
#===============================================================================
# 6.5 Making a Frequency Polygon
#===============================================================================
# Use geom_freqpoly()
ggplot(faithful, aes(x=waiting)) +
geom_freqpoly()
# adjust bins or binwidth for smoothing the polygon
ggplot(faithful, aes(x = waiting)) +
geom_freqpoly(binwidth = 4)
#===============================================================================
# 6.6 Making a Basic Box Plot
#===============================================================================
# Use geom_boxplot()
library(MASS) # Load MASS for the birthwt data set
# Use factor() to convert a numeric variable into a discrete variable
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot()
# to arrange ascending order... fct_reorder is used
library(forcats)
birthwt_mod$race <- recode(birthwt_mod$race, "1" = "White", "2"="Black", "3" = "Others")
ggplot(birthwt_mod, aes(x = fct_reorder(factor(race), bwt, .desc = F), y = bwt)) +
geom_boxplot(aes(fill = factor(race))) +
xlab("Race") + ylab("Birth Weight")
#===============================================================================
# 6.7 Adding Notches to a Box Plot
#===============================================================================
# Use geom_boxplot() and set notch = TRUE
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_boxplot(notch = T)
#===============================================================================
# 6.8 Adding Means to a Box Plot
#===============================================================================
# Use stat_summary()
# library(MASS) # Load MASS for the birthwt data set
ggplot(birthwt, aes(x = factor(race), y = bwt)) +
geom_point(position = position_jitter(width = .3), colour = "blue", alpha = 0.25) +
geom_boxplot(alpha = 0.5) +
stat_summary(fun = "mean", geom = "point", shape = 21, size = 3, fill = "red")
# Warning: The `fun.y` argument of `stat_summary()` is.....
# #  deprecated as of ggplot2 3.3.0.
#  Please use the `fun` argument instead.
# Create a base plot using the heightweight data set
hw_p <- ggplot(heightweight, aes(x = sex, y = heightIn))
hw_p +
geom_violin()
hw_p +
geom_violin(adjust = 0.5) +
geom_boxplot(width = 0.1, fill = "black") +
stat_summary(fun = median, geom = "point", fill = "white", shape=21, size = 3)
hw_p +
geom_violin(adjust = 0.5) +
geom_boxplot(width = 0.1, fill = "black", outlier.colour = NA) +
stat_summary(fun = median, geom = "point", fill = "white", shape=21, size = 3)
# use adjust parameters for smoothin the violin plot
hw_p +
geom_violin(adjust = .5)
hw_p +
geom_violin(adjust = 2)
x <- rnorm(1000)
hist(x)
library(ggplot2)
ggplot(data = NULL, aes(x)) + geom_histogram()
ggplot(data = NULL, aes(x)) + geom_histogram(binwidth = 0.5)
ggplot(data = NULL, aes(x)) + geom_histogram(binwidth = 0.5, fill="white", color = "black")
ggplot(ce_mod, aes(x = Date, y = Weight)) +
library(ggplot2)
library(dplyr)
library(tidyr)
library(gcookbook)
ggplot(ce_mod, aes(x = Date, y = Weight)) +
geom_point()
# Take a subset of the cabbage_exp data for this example
ce_mod <- cabbage_exp %>%
filter(Cultivar == "c39")
ggplot(ce_mod, aes(x = Date, y = Weight)) +
geom_point()
ggplot(ce_mod, aes(x = Date, y = Weight)) +
geom_col(fill = "white", colour = "black")
summary(ce_mod)
str(ce_mod)
head(ce_mod, 20)
ce_mod
cabbage_exp
# Create the base plot
mpg_plot <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ drv)
mpg_plot
head(mpg)
str(mpg)
summary(mpg)
unique(mpg$drv)
df <- mpg %>% recode(drv, Front = f, FourWheel = 4, Rear = r)
df <- as.data.frame(mpg)
df$drv <- as.factor(df$drv)
df <- mpg %>% recode(drv, Front = f, FourWheel = 4, Rear = r)
df <- mpg %>% recode_factor(drv, Front = f, FourWheel = 4, Rear = r)
df <- df %>% recode_factor(drv, Front = f, FourWheel = 4, Rear = r)
df$drv <-  recode_factor(df$drv, Front = f, FourWheel = 4, Rear = r)
df$drv <-  recode_factor(df$drv, "Front" = "f", "FourWheel" = "4", "Rear" = "r")
mpg_plot <- ggplot(df, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ drv)
head(df)
df$drv <-  recode_factor(df$drv, "f" = "Front", "4" = "FourWheel", "r"="Rear" )
head(df)
mpg_plot <- ggplot(df, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ drv)
mpg_plot
# A data frame with labels for each facet
f_labels <- data.frame(drv = c("4", "f", "r"), label = c("4wd", "Front", "Rear"))
mpg_plot +
geom_text(x = 6, y = 40, aes(label = label), data = f_labels)
# Create the base plot
mpg_plot <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ drv)
mpg_plot +
geom_text(x = 6, y = 40, aes(label = label), data = f_labels)
pg_plot <- ggplot(PlantGrowth, aes(x = group, y = weight)) +
geom_boxplot()
pg_plot
pg_plot +
scale_x_discrete(limits = c("trt1", "ctrl", "trt2"))
library(gcookbook)
library(MASS)
library(datasets)
library(dplyr)
library(ggplot2)
df <- diamonds
df <- heightweight
head(df)
fit_lm1 <- lm(wieghtlb ~ ageYear + ageMonth + heightIn, data = df)
attach(df)
fit_lm1 <- lm(wieghtlb ~ ageYear + ageMonth + heightIn, data = df)
detach(df)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth + heightIn, data = df)
pred_y <- predict(fit_lm1)
df2 <- data.frame(df, pred_y)
head(df2)
df2 <- df %>% mutate(myerror = weightLb - pred_y)
head(df2)
df <- heightweight
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth + heightIn, data = df)
pred_y <- predict(fit_lm1)
df2 <- data.frame(df, pred_y)
df2 <- df2 %>% mutate(myerror = weightLb - pred_y)
head(df2)
df2 <- df2 %>% mutate(rss = myerror^2)
head(df2)
tot_var <- var(df2$weightLb)
rss2 <- var(df2$myerror)
my_R2 <- 1-rss2
my_R2 <- 1 - (rss2/tot_var)
summary(fit_lm1)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth, data = df)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth + heightIn, data = df)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth, data = df)
fit_lm1 <- lm(weightLb ~ ageYear, data = df)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth + heightIn, data = df)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth, data = df)
fit_lm1 <- lm(weightLb ~ ageYear, data = df)
fit_lm1 <- lm(weightLb ~ ageYear + ageMonth + heightIn, data = df)
fit_lm2 <- lm(weightLb ~ ageYear + ageMonth, data = df)
fit_lm3 <- lm(weightLb ~ ageYear, data = df)
View(fit_lm1)
fit_lm1
View(fit_lm1)
str(summary(fit_lm1))
summary(fit_lm1)$r.squared
x <- c(summary(fit_lm1)$r.squared,
summary(fit_lm2)$r.squared,
summary(fit_lm3)$r.squared)
x
x <- as.data.frame(x)
x
x <- x %>% arrange(desc(x))
x
x <- x %>% arrange(x)
x
df
head(df)
fit_lm0 <- lm(weightLb ~ sex + ageYear + ageMonth + heightIn, data = df)
summary(fit_lm0)$r.sqared
str(summary(fit_lm1))
summary(fit_lm1)$r.squared
x <- c(summary(fit_lm3)$r.squared,
summary(fit_lm2)$r.squared,
summary(fit_lm1)$r.squared,
summary(fit_lm1)$r.squared)
x <- as.data.frame(x)
x
head(df)
unique(df$sex)
fit_lm0 <- lm(weightLb ~ ageYear + sex + heightIn, data = df)
fit_lm1 <- lm(weightLb ~ ageYear + sex, data = df)
fit_lm2 <- lm(weightLb ~ ageYear, data = df)
x <- c(summary(fit_lm2)$r.squared,
summary(fit_lm1)$r.squared,
summary(fit_lm0)$r.squared)
x <- as.data.frame(x)
x
attach(df)
plot(ageYear, ageMonth)
detach(df)
fit_lm4 <- lm(ageMonth ~ ageYear, data = df)
summary(fit_lm4)
setwd("F:/R_Graph_Cookbook/Overall_Graph")
library(ggplot2)
library(dplyr)
library(tidyr)
library(gcookbook)
hw_plot <- ggplot(heightweight, aes(x = ageYear, y = heightIn)) +
geom_point()
hw_plot +
theme_bw()
# Classic theme, with axis lines but no gridlines
hw_plot +
theme_classic()
# Minimal theme without background annotations
hw_plot +
theme_minimal()
# Black-and-white theme
hw_plot +
theme_bw()
